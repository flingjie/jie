<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>Jie&#039;s Home</title> <link href="http://127.0.0.1:8000"/> <link type="application/atom+xml" rel="self" href="http://127.0.0.1:8000/atom.xml"/> <updated>Tue, 03 Feb 2015 22:39:58 +0800</updated> <author> <name>Jie</name> </author> <entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/一些有用的工具.html"/> <title>一些有用的工具</title> <published>2014-04-19 12:26:04</published> <updated>2014-04-19 12:26:04</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;portia&lt;/strong&gt;&lt;br/&gt;
  Visual scraping for Scrapy. https://github.com/scrapinghub/portia&lt;/li&gt;
&lt;/ul&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/用于在线学习的网站.html"/> <title>用于在线学习的网站</title> <published>2014-04-16 11:26:11</published> <updated>2014-04-16 11:26:11</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://learnlayout.com/&quot; &gt;Learning CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/node常用库不断补充中.html"/> <title>node常用库（不断补充中）</title> <published>2014-04-16 10:44:09</published> <updated>2014-04-16 10:44:09</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d3js.org/&quot; &gt;D3.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://visjs.org/&quot; &gt;vis.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nytimes.github.io/pourover/&quot; &gt;PourOver&lt;/a&gt;&lt;br/&gt;
A library for simple, fast filtering and sorting of large collections.&lt;/li&gt;
&lt;/ul&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/使用Emacs编辑clojure.html"/> <title>使用Emacs编辑clojure</title> <published>2014-03-29 10:39:00</published> <updated>2014-03-29 10:39:00</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;1.&lt;strong&gt;使用环境&lt;/strong&gt;：
ubuntu12.04 + emacs24 + leiningen2.3.4&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;配置emacs&lt;/strong&gt;&lt;br/&gt;
  a.添加package地址，在&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;中加入：   &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(require &#039;package)
(add-to-list &#039;package-archives
         &#039;(&amp;quot;marmalade&amp;quot; . &amp;quot;http://marmalade-repo.org/packages/&amp;quot;))
(package-initialize)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b.安装相关插件，在&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;中加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defvar my-packages &#039;(starter-kit
                      starter-kit-lisp
                      starter-kit-bindings
                      starter-kit-eshell
                      clojure-mode
                      clojure-test-mode
                      cider))

(dolist (p my-packages)
    (when (not (package-installed-p p))
        (package-install p)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.&lt;strong&gt;编辑相关操作&lt;/strong&gt;&lt;br/&gt;
a.文件、窗口操作
&lt;code&gt;text
C-x C-f    打开文件
C-x C-s    保存文件
C-x b      切换buffer
C-x k      关闭当前buffer
C-x o      切换到下一buffer
C-x 0      隐藏当前buffer
C-x 1      隐藏其他buffer
C-x 2      垂直分割窗口
C-x 3      水平分割窗口
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;b.移动操作
&lt;code&gt;
C-a    移动到行头
C-e    移动到行尾
C-n    移动到下一行
C-p    移动到上一行
C-b    向后移动一个字符
C-f    向前移动一个字符
M-f    向前移动一个单词
M-b    向后移动一个单词
C-v    向下翻页
M-v    向上翻页
M-&amp;lt;    移动到buffer开头
M-&amp;gt;    移动到buffer末尾
C-M-f  移动到后一个括号
C-M-f  移动到前一个括号
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;c.编辑操作
```
C-d        删除一个字符
M-d        删除一个单词
C-k        删除一行
C-w        删除选中区域
M-w        复制选中区域
C-y        粘帖
C-j        换行&lt;/p&gt;

&lt;p&gt;C-M-Space  选中光标所在的S表达式
C-M-t      交换连个S表达式位置
M-1 (      在当前S表达式外添加一对括号
M-s        删除当前S表达式外的一对括号
M-r        删除当前S表达式外的一对括号(包括内容)
C-)        将后面的括号向后移动一个元素
           (a b (c d) e f) -&amp;gt; (a b (c d e) f)
C-}        将后面的括号向前移动一个元素
           (a b (c d) e f) -&amp;gt; (a b (c) d e f)
C-(        将前面的括号向前移动一个元素
C-{        将前面的括号向后移动一个元素
C-M-q      代码对齐&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
d.帮助操作&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-h b    查看当前的key绑定
C-h m    查看当前的编辑模式
C-h a    查找一个关键词的相关帮助
C-h k    查看一个key的绑定
```&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;编译相关操作&lt;/strong&gt;
&lt;code&gt;
C-c M-j    cider-jack-in,启动nREPL
C-c C-e    执行s表达式
C-c C-r    执行当前选中区
C-c C-z    运行lisp进程
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;宏操作&lt;/strong&gt;
&lt;code&gt;
C-x (   ;;开始录制宏
...     ;;输入操作
C-x )   ;;结束录制
C-x e   ;;执行宏
&lt;/code&gt;&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/clojure中的函数递归.html"/> <title>clojure中的函数递归</title> <published>2014-03-18 21:23:52</published> <updated>2014-03-18 21:23:52</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;一般函数可以通过调用自身来实现递归的效果，但这种方式会消耗栈有导致栈
溢出。比如下面这个计算阶乘的例子：
&lt;code&gt;clojure
(defn recur-fac [n]
    (if (= 1 n)
        1
        (* n (recur-fac (dec n)))))
&lt;/code&gt;
通常，可以改写成尾递归的方式来避免消耗栈导致栈溢出，改写如下：
&lt;code&gt;clojure
(defn recur-fac [n]
    (letfn [(fac [c r]
                (if (= 0 c)
                    r
                    (fac (dec c) (* c r))))]
    (fac n 1)))
&lt;/code&gt;
上面的写法使用了尾递归，在common lisp的语言中可以达到尾递归优化(TCO)，
问题是clojure是基于JVM，无法支持完全的TCO，这主要是Java的安全模型决定
的。还好Clojue也支持同一个函数体直接调用自身的TCO，只是要使用clojure的
特殊形式，即使用recur关键字。改写如下：
&lt;code&gt;clojure
(defn recur-fac [n]
    (letfn [(fac [c r]
                (if (= 0 c)
                    r
                    (recur (dec c) (* c r))))]
    (fac n 1)))
&lt;/code&gt;
好了，这样修改后，就不会有栈溢出的危险了。
上述例子是在同一个函数中进行自身调用，如果要在两个函数中相互调用则需要
用到trampoline，使用如下：
``` clojure
(declare is-odd?)
(defn is-even? [n]
    (if (= n 0)
        true
        #(is-odd? (dec n))))
(defn is-odd? [n]
    (if (= n 0)
        false
        #(is-even? (dec n))))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;调用：
``` bash
user=&gt; (trampoline is-odd? 10000000)
false
user=&gt; (trampoline is-even? 10000)  
true&lt;/code&gt;&lt;/pre&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/python描述器.html"/> <title>python描述器</title> <published>2014-03-15 16:27:32</published> <updated>2014-03-15 16:27:32</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;在python中一个描述器就是定义下面的方法中一个或多个的一个对象：
``` python
&lt;strong&gt;get&lt;/strong&gt;(self, instance, owner)
&lt;strong&gt;set&lt;/strong&gt;(self, instance, value)
&lt;strong&gt;delete&lt;/strong&gt;(self, instance)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
如果一个对象同时定义了`__get__()`和`__set__()`，它叫做资料描述器。只定义了`__get__()`的描述器叫做非资料描述器(一般用于方法)。
资料描述器和非资料描述器的区别在于：相对于实例字典的优先级。如果实例字典中有与资料描述器同名的属性，优先使用资料描述器中的；如果实例字典中有与非资料描述器中同名的属性，优先使用实例字典中的。即优先级 资料描述器 &gt; 实例字典 &gt; 非资料描述器。   
要想写一个只读的资料描述器，只需同时定义`__get__()`和`__set__()`并在`__set__()`中抛出一个`AttributeError`。


**描述器的调用**   
描述器可以直接这么调用：`descriptor.__get__(obj)`，不过一般都是用来拦截对实例属性的访问。   
描述器的调用规则如下：   

* `__get__(self, instance, owner)`
``` python
  obj.descriptor         will call descriptor.__get__(obj. OwnerClass)
  OwnerClass.descriptor  will call  descriptor.__get__(None, OwnerClass)&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__set__(self, instance, value)&lt;/code&gt;
&lt;code&gt;python
  obj.descriptor = 5     will call  descriptor.__set__(obj, 5)
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__delete__(self, instance)&lt;/code&gt;
&lt;code&gt;python
  del obj.descriptor     will call  descriptor.__delete__(obj)
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;参考资料：&lt;/em&gt;&lt;br/&gt;
&lt;a href=&quot;http://openhome.cc/Gossip/Python/Descriptor.html&quot; &gt;Python Gossip: 描述器&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://pyzh.readthedocs.org/en/latest/Descriptor-HOW-TO-Guide.html&quot; &gt;Python描述器引导&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://docs.python.org/2/howto/descriptor.html&quot; &gt;Descriptor HowTo Guide&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://me.veekun.com/blog/2012/05/23/python-faq-descriptors/&quot; &gt;Python descriptor&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://me.veekun.com/blog/2012/05/23/python-faq-descriptors/&quot; &gt;Python FAQ: Descriptors&lt;/a&gt;   &lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/python中的上下文管理器.html"/> <title>python中的上下文管理器</title> <published>2014-03-14 17:13:46</published> <updated>2014-03-14 17:13:46</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;上下文管理器(context manager)是Python2.5开始支持的一种语法，用于处理指
定代码块进入和退出时的操作。一般使用with语法，也可以直接调用相应的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;with语句&lt;/strong&gt;&lt;br/&gt;
with语句是用来简化“try/finally”语句的，通常用于处理共享资源的获取和
释放，比如文件、数据库和线程资源。它的用法如下：
&lt;code&gt;python
with VAR = EXPR:
    BLOCK
&lt;/code&gt;
其相当于进行了如下操作：
&lt;code&gt;python
VAR = EXPR
VAR.__enter__()
try:
    BLOCK
finally:
    VAR.__exit__()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例子如下：
``` python
import time
class demo:
    def &lt;strong&gt;init&lt;/strong&gt;(self,label):
        self.label = label&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __enter__(self):
    self.start = time.time()

def __exit__(self, exc_ty, exc_val, exc_tb):
    end = time.time()
    print (&#039;{}: {}&#039;.format(self.label, end - self.start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with demo(&#039;counting&#039;):
    n = 10000000
    while n &amp;gt; 0:
        n -= 1;&lt;/p&gt;

&lt;h1&gt;counting: 0.933553934097&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;
也可利用@contextmanager装饰器改写如下:
``` python
from contextlib import contextmanager
import time

@contextmanager
def demo(label):
    start = time.time()
    try:
        yield
    finally:
        end = time.time()
        print(&#039;{}: {}&#039;.format(label, end - start))

with demo(&#039;counting&#039;):
    n = 10000000
    while n &gt; 0:
        n -= 1
# counting: 0.947228908539

# 其中yield之前的所有代码都类似于__enter__方法的内容。而yield之后的所有
# 代码类似__exit__方法的内容。&lt;/code&gt;&lt;/pre&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/python中的装饰器.html"/> <title>python中的装饰器</title> <published>2014-03-14 15:00:56</published> <updated>2014-03-14 15:00:56</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;装饰器的作用是在原有对象的基础上添加额外功能。python中可以将函数作为参
数，进行装饰，返回经过修饰过的函数，比如：
``` python
def decorator(fn):
    def wrapper():
        print &amp;quot;&lt;em&gt;*&lt;/em&gt; wrapper &lt;strong&gt;&lt;em&gt;&amp;quot;
        fn()
        print &amp;quot;&lt;/em&gt;&lt;/strong&gt; wrapper &lt;em&gt;*&lt;/em&gt;&amp;quot;
    return wrapper&lt;/p&gt;

&lt;p&gt;def origin_fn():
    print &amp;quot;--- origin ---&amp;quot;&lt;/p&gt;

&lt;p&gt;decorated_fn = decorator(origin_fn)&lt;/p&gt;

&lt;p&gt;decorated_fn()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
python可以使用语法糖@来达到相同的作用，例子如下：
``` python
def makebold(fn):
    def wrapper():
        return &quot;&lt;b&gt;&quot; + fn() + &quot;&lt;/b&gt;&quot;
    return wrapper

def makeitalic(fn):
    def wrapper():
        return &quot;&lt;i&gt;&quot; + fn() + &quot;&lt;/i&gt;&quot;
    return wrapper

@makebold
@makeitalic
def helloworld():
    return &quot;hello world&quot;

print helloworld()
## return &lt;b&gt;&lt;i&gt;helloworld&lt;/i&gt;&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/python中的生成器.html"/> <title>python中的生成器</title> <published>2014-03-14 11:52:54</published> <updated>2014-03-14 11:52:54</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;生成器是可以当作iterator使用的特殊函数。它有以下优点：&lt;br/&gt;
1. 惰性求值；&lt;br/&gt;
2. 在处理大的列表时不需要一次性加载全部数据，可以减小内存使用；&lt;br/&gt;
除非特殊的原因，应该在代码中使用生成器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成器(generator) vs 函数(function)&lt;/strong&gt;&lt;br/&gt;
生成器和函数的主要区别在于函数return a value, 生成器yield a value同时
记录以便在下次调用时从上次的状态下恢复执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成器(generator) vs 迭代器(iterator)&lt;/strong&gt;&lt;br/&gt;
 * 迭代器是一个更一般的概念，它是一个有next方法和返回self的__iter__方
法的类。&lt;br/&gt;
 * 每个生成器是一个迭代器，但迭代器不一定是生成器，生成器是有记录上次
 执行状态的迭代器。从这点上看生成器有点像闭包，只是它记录的不是数据
 的状态，记录的是执行过程中的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成器(generator) vs 续延(coninuations)&lt;/strong&gt;
与生成器相比，续延更加灵活，续延允许你调用不同状态的执行过程，而不像生
成器这样直接返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建生成器&lt;/strong&gt;&lt;br/&gt;
在python可以使用以下方式创建生成器：&lt;br/&gt;
1.使用yield
&lt;code&gt;python
def Generator(x,y):
    for i in xrange(x):
        for j in xrange(y):
            yield(i, j)
&lt;/code&gt;
2.使用generator expression
&lt;code&gt;python
def Generator(x, y):
    return ((i, j) for i in xrange(x) for j in xrange(y))
&lt;/code&gt;&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://127.0.0.1:8000/posts/ruby中的clone和dup.html"/> <title>ruby中的clone和dup</title> <published>2014-03-12 15:04:59</published> <updated>2014-03-12 15:04:59</updated> <author> <name>Jie</name> <uri>http://127.0.0.1:8000</uri> </author> <content type="html">&lt;p&gt;ruby中clone和dup都是对一个对象的浅拷贝，其区别如下：&lt;br/&gt;
1.clone会拷贝单例方法，而dup不会。
``` ruby
a = Object.new
def a.hello
    &amp;quot;hello&amp;quot;
end&lt;/p&gt;

&lt;p&gt;a.dup.hello   # raises NoMethodError
a.clone.hello # return &amp;quot;hello&amp;quot;
```&lt;/p&gt;

&lt;p&gt;2.dup不能对frozen状态的对象进行拷贝，而clone可以。&lt;/p&gt;
</content> </entry> </feed>